/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/agents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Agents */
        get: operations["get_agents_agents__get"];
        put?: never;
        /** Create Agent */
        post: operations["create_agent_agents__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{agent_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Agent */
        get: operations["get_agent_agents__agent_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{agent_name}/configure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Configure Agent */
        post: operations["configure_agent_agents__agent_name__configure_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{agent_name}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Agent */
        post: operations["start_agent_agents__agent_name__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{agent_name}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop Agent */
        post: operations["stop_agent_agents__agent_name__stop_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{agent_name}/action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request Action */
        post: operations["request_action_agents__agent_name__action_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ActionRequest
         * @description Request model for agent actions
         */
        ActionRequest: {
            /** Connection */
            connection: string;
            /** Action */
            action: string;
            /**
             * Params
             * @default []
             */
            params: string[] | null;
        };
        /** AgentConfig */
        AgentConfig: {
            /** Name */
            name: string;
            /** Bio */
            bio?: string[] | null;
            /** Traits */
            traits?: string[] | null;
            /** Examples */
            examples?: string[] | null;
            /** Example Accounts */
            example_accounts?: string[] | null;
            /** Loop Delay */
            loop_delay?: number | null;
            /** Config */
            config?: (components["schemas"]["DiscordConfig"] | components["schemas"]["TwitterConfig"] | components["schemas"]["NetworkConfig"])[] | null;
            /** Tasks */
            tasks?: components["schemas"]["TaskConfig"][] | null;
            /** Use Time Based Weights */
            use_time_based_weights?: boolean | null;
            time_based_multipliers?: components["schemas"]["TimeBasedMultipliers"] | null;
        };
        /** DiscordConfig */
        DiscordConfig: {
            /**
             * Name
             * @default discord
             */
            name: string;
            /** Message Read Count */
            message_read_count: number;
            /** Message Emoji Name */
            message_emoji_name: string;
            /** Server Id */
            server_id: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** NetworkConfig */
        NetworkConfig: {
            /** Name */
            name: string;
            /** Network */
            network?: string | null;
            /** Rpc */
            rpc?: string | null;
            /** Private Key */
            private_key: string;
        };
        /** TaskConfig */
        TaskConfig: {
            /** Name */
            name: string;
            /** Weight */
            weight: number;
        };
        /** TimeBasedMultipliers */
        TimeBasedMultipliers: {
            /** Tweet Night Multiplier */
            tweet_night_multiplier: number;
            /** Engagement Day Multiplier */
            engagement_day_multiplier: number;
        };
        /** TwitterConfig */
        TwitterConfig: {
            /** Name */
            name: string;
            /** Timeline Read Count */
            timeline_read_count: number;
            /** Own Tweet Replies Count */
            own_tweet_replies_count: number;
            /** Tweet Interval */
            tweet_interval: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_agents_agents__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_agent_agents__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_agents__agent_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    configure_agent_agents__agent_name__configure_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    start_agent_agents__agent_name__start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stop_agent_agents__agent_name__stop_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    request_action_agents__agent_name__action_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
